#!/bin/sh -f
#
# automate building of a freebsd release
# it gives you the option to update svn mirror, local source, build world,
# make release, and make ISO disc images.
# it saves all your choices in .make.release and reloads them at the next run
# it figures out the release name from $srcDir/sys/conf/newvers.sh
#

# $Log: make.release,v $
# Revision 1.24  2018/06/23 20:25:14  ping
# - quiet obj cleanup
# - fbsd 'rerelease' target changed to 'release'
#
# Revision 1.23  2017/09/06 19:07:40  ping
# - change to svnlite*
# - quiet rm warnings
# - switch to clang
#
# Revision 1.22  2017/01/27 02:10:03  ping
# *** empty log message ***
#
# Revision 1.21  2014/09/18 18:58:42  ping
# checkin before changing over to new release(7) that came with
# FreeBSD release 10.x
#
#

SVNSYNC=svnlitesync
SVNADMIN=svnliteadmin
SVN=svnlite
LN=/bin/ln
RM=/bin/rm
MKDIR=/bin/mkdir
CHFLAGS=/bin/chflags

umask=022

rcfile=$HOME/.`basename $0`
branch="RELENG_4"
releaseDir="/local/release10"
svnRoot="/local/fbsdsvn"
buildMaxJob=32
releaseMaxJob=1

read_rcfile() {
	test -f $rcfile && \
		echo "loading your settings from $rcfile" && \
		. $rcfile
}

write_rcfile() {
	echo "saving your settings to $rcfile"
	cat > $rcfile <<@EOF
updateSvn=$updateSvn
srcDir=$srcDir
updateSrc=$updateSrc
srcOwner=$srcOwner
buildWorld=$buildWorld
makeRelease=$makeRelease
newRelease=$newRelease
svnRoot=$svnRoot
NOPORTS=$NOPORTS
NODOC=$NODOC
TARGET=$TARGET
makeIso=$makeIso
buildMaxJob=$buildMaxJob
releaseMaxJob=$releaseMaxJob
branch=$branch
releaseDir=$releaseDir
logFile=$logFile
@EOF
}

get_yes_no() {
	eval default=\$$2
	while true
	do
		echo -n "$1 (Y/N) [$default] ? " 
		read -t 30 response
		if [ $? != 0 -o x$response = x ]; then
		        return;
		fi
		case $response in
			[Nn]*) eval $2="NO";
			      return;;
			[Yy]*) eval $2="YES";
			      return;;
			*) #response="$2";
			      return;;
		esac
	done
}

prompt() {
	eval default=\$$2
	echo -n "$1 [$default] ? "
	read -t 30 response
	if [ $? != 0 -o x$response = x ]; then
		return
	fi
	eval $2=$response;
}

die() {
	echo "$1"
	exit $2
}

#
# Returns full path of $1
#
fullpath() {
	eval input=\$$1
	test -d $input || return
	dir=`dirname $input`
	dir=`(cd ${dir}; /bin/pwd)` 
	eval $1=$dir/`basename $input`
	return
}

# Do CMD [ echo ] [ errorMsg ]
# $1 : shell command
# $2 : echo shell command if set to 'echo'
# $3 : error message if shell command exited status is non-zero
Do() {
	if [ $# -ne 3 ] ; then
		echo "Do() requires 3 arguments." >&2
		exit 1
	fi

	if [ $2 = 'echo' ]; then
		echo "$1"
	fi
	eval "$1"
	[ $? -eq 0 ] || die "$3" $?
}

read_rcfile

if [ x$1 != x-n ]; then
get_yes_no "Update local svn repository mirror" updateSvn

if [ "$updateSvn" = 'YES' ]; then
	prompt "svn repository" svnRoot
	fullpath svnRoot
fi

prompt "source directory" srcDir
fullpath srcDir

get_yes_no "Update source tree in $srcDir" updateSrc

if [ $updateSrc = 'YES' ]; then
	prompt "Update src as user" srcOwner
	prompt "SVN Root" svnRoot
fi

get_yes_no "Build world" buildWorld

get_yes_no "Make release" makeRelease

if [ $makeRelease = 'YES' ]; then
	get_yes_no "Is this a new release" newRelease
else
	unset newRelease
fi

if [ $makeRelease = 'YES' ]; then
	get_yes_no "Skip building of port collection" NOPORTS
else
	unset NOPORTS
fi

if [ $makeRelease = 'YES' ]; then
	get_yes_no "Skip building of release documentation" NODOC
	prompt "Target architecture [amd64/i386]" TARGET
else
	unset NODOC
fi

get_yes_no "Create ISO images" makeIso

if [ "$buildWorld" = 'YES' ]; then
	prompt "Maximum parallel makes during buildworld" buildMaxJob
fi

if [ "$makeRelease" = 'YES' ]; then
	prompt "Maximum parallel makes during make release" releaseMaxJob
fi

if [ "$buildWorld" = 'YES' -o "$makeRelease" = 'YES' ]; then
	prompt "Release tag" branch
fi

if [ $makeIso = 'YES' -o $makeRelease = 'YES' ]; then
	prompt "Release directory" releaseDir
	fullpath releaseDir
fi

if [ x$logFile = x ]; then
	logFile=`pwd`/`basename $0`.log
fi
prompt "Log file" logFile
fullpath logFile

cat <<@EOM
        Update SVN depot              : $updateSvn
	  svnRoot                     : $svnRoot
        Update source tree            : $updateSrc
          srcOwner                    : $srcOwner
        Build world                   : $buildWorld
        Make release                  : $makeRelease
          Make New Release            : $newRelease
          Skip building of ports      : $NOPORTS
          Skip building of doc        : $NODOC
        Create ISO images             : $makeIso
        Maximum parallel build jobs   : $buildMaxJob
        Maximum parallel release jobs : $releaseMaxJob
        Release Branch                : $branch
        Release Directory             : $releaseDir
        Log File                      : $logFile

***** Make sure you have enough space and inodes
***** in obj dir and $releaseDir
@EOM

continue=YES
get_yes_no "Continue" continue
write_rcfile

[ $continue = 'YES' ] || die "XXXXX Quit XXXXX" 1

fi  # [ x$1 != x-n ]; then

echo Writing to log file $logFile

(
if [ $updateSvn = 'YES' ]; then
	echo "***** Updating SVN repository mirror"
	if [ ! -d $svnRoot ]; then
		cmd="su svn -c 'umask 002 && mkdir -m 775 -p $svnRoot && \
cd $svnRoot && \
$SVNADMIN create base && \
$SVNADMIN create doc && \
$SVNADMIN create ports && \
echo \'#!/bin/sh\' > base/hooks/pre-revprop-change && \
cp base/hooks/pre-revprop-change doc/hooks/pre-revprop-change && \
cp doc/hooks/pre-revprop-change ports/hooks/pre-revprop-change && \
$SVNSYNC init file://${svnRoot}/base svn://svn.freebsd.org/base && \
$SVNSYNC init file://${svnRoot}/doc svn://svn.freebsd.org/doc && \
$SVNSYNC init file://${svnRoot}/ports svn://svn.freebsd.org/ports'"
		Do "$cmd" echo "XXXXX Failed to initialize svn repo XXXXX"
	fi
	cmd="su svn -c '$SVNSYNC sync -q file://${svnRoot}/base'"
	Do "$cmd" echo "XXXXX Update SVN base failed XXXXX"

        [ "$NODOC" = 'YES' ] && {
		cmd="su svn -c '$SVNSYNC sync -q file://${svnRoot}/doc'"
		Do "$cmd" echo "XXXXX Update SVN doc failed XXXXX"
	}

        [ "$NOPORTS" = 'YES' ] && {
		cmd="su svn -c '$SVNSYNC sync -q file://${svnRoot}/ports'"
		Do "$cmd" echo "XXXXX Update SVN ports failed XXXXX"
	}
fi

cd $srcDir

if [ $updateSrc = 'YES' ]; then
	echo "***** Setting up $srcDir"
	if [ -d $srcDir ]; then
		cd $srcDir
		$SVN info > /dev/null 2>&1
		if [ $? -eq 0 ]; then
		  cmd="su $srcOwner -c 'umask 002; $SVN update'"
		else
		  cmd="su $srcOwner -c 'umask 002; $SVN co $svnRoot/base/$branch .'"
		fi
	else
		dir=`dirname $srcDir`
		mkdir -p $dir && cd $dir
	  	cmd="su $srcOwner -c 'umask 002; $SVN co $svnRoot/base/$branch .'"
	fi
	Do "$cmd" echo "XXXXX Update $srcDir failed XXXXX"

	if [ -z "$NODOC" ]; then
	fi

	if [ -z "$NOPORTS" ]; then
		mkdir -p /usr/ports
	if [ -d $portDir ]; then
	fi
	fi
fi

cd $srcDir
newvers="${srcDir}/sys/conf/newvers.sh"
eval `grep "^REVISION=" ${newvers}`
eval `grep "^BRANCH=" ${newvers}`
RELEASE="${REVISION}-${BRANCH}"
TODAY=`date +%Y%m%d`
objDir=`dirname $srcDir`/obj
export MAKEOBJDIRPREFIX=$objDir

if [ $buildWorld = 'YES' ]; then
	$CHFLAGS -R noschg /usr/obj/* > /dev/null 2>&1
	$RM -rf /usr/obj/* > /dev/null 2>&1
	echo "***** Building world, see log at /var/tmp/buildworld-${TODAY}"
	date > /var/tmp/buildworld-${TODAY}
#	buildFlags="-DNOPROFILE=true -DWITHOUT_CLANG"
	[ -n "$TARGET" ] && \
		buildFlags="$buildFlags TARGET=$TARGET"
	cmd="make -B -j${buildMaxJob} ${buildFlags} buildworld buildkernel >>\
		/var/tmp/buildworld-${TODAY} 2>&1"
	Do "$cmd" echo "XXXXX Build world failed XXXXX"
	date >> /var/tmp/buildworld-${TODAY}
fi

cd ${srcDir}/release 
if [ $makeRelease = 'YES' ]; then
	makeReleaseFlags="BUILDNAME=${RELEASE}-${TODAY}"
	makeReleaseFlags="OSRELEASE=${RELEASE}"
	releaseBranch=`echo $branch | cut -d/ -f1`
	makeReleaseFlags="BRANCH=${releaseBranch}"
	makeReleaseFlags="$makeReleaseFlags WORLD_FLAGS=\"-B -j${releaseMaxJob}\""
	[ "$NOPORTS" = 'YES' ] && \
		makeReleaseFlags="$makeReleaseFlags NOPORTS=YES"
	[ "$NODOC" = 'YES' ] && \
		makeReleaseFlags="$makeReleaseFlags NODOC=YES"
	[ -n "$TARGET" ] && \
		makeReleaseFlags="$makeReleaseFlags TARGET=$TARGET"

	if [ $newRelease = 'YES' ]; then
		if [ $makeIso = 'YES' ]; then
			target="release"
		else
			target="ftp"
		fi
		$RM -rf ${objDir}/usr/src/release ${releaseDir} > /dev/null 2>&1
		$MKDIR -p ${releaseDir}
		$CHFLAGS -R noschg ${objDir}/usr/src/release ${releaseDir}
		$RM -rf ${objDir}/usr/src/release ${releaseDir}
		$MKDIR -p ${releaseDir}
	else
		target="release"
	fi


	echo "***** Build release log at /var/tmp/make.release-${TODAY}"
	cmd="make $makeReleaseFlags $target > \
		/var/tmp/make.release-${TODAY} 2>&1"
	Do "$cmd" echo "XXXXX make release failed XXXXX"
	cmd="make $makeReleaseFlags install DESTDIR=${releaseDir} >> \
		/var/tmp/make.release-${TODAY} 2>&1"
	Do "$cmd" echo "XXXXX make release install failed XXXXX"
fi
) > $logFile 2>&1 &
